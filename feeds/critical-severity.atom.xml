<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Bug Alert - Critical Severity</title><link href="https://bugalert.org/" rel="alternate"></link><link href="https://bugalert.org/feeds/critical-severity.atom.xml" rel="self"></link><id>https://bugalert.org/</id><updated>2022-03-30T15:00:00+00:00</updated><subtitle>A nonprofit service for alerting security and IT professionals of high-impact and 0day vulnerabilities.</subtitle><entry><title>Confirmed remote code execution (RCE) in Spring Core, an extremely popular Java framework (CVE-2022-22965)</title><link href="https://bugalert.org/content/notices/2022-03-30-spring.html" rel="alternate"></link><published>2022-03-30T15:00:00+00:00</published><updated>2022-03-30T15:00:00+00:00</updated><author><name>Bug Alert Contributors</name></author><id>tag:bugalert.org,2022-03-30:/content/notices/2022-03-30-spring.html</id><summary type="html">&lt;p&gt;Praetorian has confirmed that a remote code execution vulnerability exists in Spring, an extremely popular Java framework. How broadly this impacts the Spring ecosystem remains unclear. The flaw has been assigned a bug alert severity of 'critical'.&lt;/p&gt;</summary><content type="html">&lt;h4&gt;Updated Notice, 10:00AM New York Time&lt;/h4&gt;
&lt;p&gt;This flaw has been assigned CVE-2022-22965, and the Spring team is now issuing fixes. &lt;a href="https://spring.io/blog/2022/03/31/spring-framework-rce-early-announcement"&gt;Please follow their post here for further updates&lt;/a&gt;.&lt;/p&gt;
&lt;h4&gt;Original Notice&lt;/h4&gt;
&lt;p&gt;This is &lt;strong&gt;&lt;em&gt;not&lt;/em&gt;&lt;/strong&gt; related to CVE-2022-22963, Spring Cloud Function, or SpEL routing expressions. That is a separate, (possibly?) less widespread issue &lt;a href="https://tanzu.vmware.com/security/cve-2022-22963"&gt;documented here&lt;/a&gt;. Sadly, both are being referred to broadly as 'Spring4Shell', significantly adding to the confusion. We suggest the community refrain from using the term.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.praetorian.com/blog/spring-core-jdk9-rce/"&gt;Praetorian has confirmed the existence of the remote code execution vulnerability that impacts Spring Core.&lt;/a&gt; Praetorian has also confirmed online rumors of the issue being caused by a partial fix to a very old issue, &lt;a href="http://blog.o0o.nu/2010/06/cve-2010-1622.html"&gt;CVE-2010-1622&lt;/a&gt;. Unfortunately, proof-of-concept code is now widely available and is likely to be weaponized. What we don't know, though, is how widespread this issue really is, or how easily exploited it will be in the real world. As of late in the evening on March 30th, New York time, there's not much evidence yet that it will be exploitable in common configurations.&lt;/p&gt;
&lt;p&gt;There is currently no patch. The existing proof-of-concept, as well as the proof-of-concept from 2010, both reference &lt;code&gt;class.module.classLoader&lt;/code&gt; when constructing the attack. Bug Alert therefore recommends testing and deploying a WAF rule that analyzes request bodies for requests containing the term &lt;code&gt;classLoader&lt;/code&gt;. Please remember that regex-based WAF rules are often easily bypassed, so do not regard this as a long-term solution.&lt;/p&gt;
&lt;p&gt;Continue to monitor the Praetorian blog and the Bug Alert discussion thread (linked below) for further information. Once available, official notice from the Spring project is likely to be placed on the &lt;a href="https://tanzu.vmware.com/security/"&gt;VMware Tanzu security advisories page&lt;/a&gt; (VMware owns the Spring project). It's likely they will also &lt;a href="https://spring.io/blog"&gt;furnish a blog post&lt;/a&gt; with further information at a later time.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.rapid7.com/blog/post/2022/03/30/spring4shell-zero-day-vulnerability-in-spring-framework/"&gt;Rapid7 has put together a fantastic writeup with technical details&lt;/a&gt;. Their blog post also details some of the configurations that are required for the exploit to be successful, and they have committed to using that venue to provide additional information as it becomes available.&lt;/p&gt;
&lt;p&gt;If you have feedback or questions, please comment on the discussion thread linked below. This notice cost the project approximately $150 USD to send. If you would like to support the project, &lt;a href="https://bugalert.org/content/pages/financial-support.html"&gt;you can learn more here&lt;/a&gt;&lt;/p&gt;</content><category term="Software Frameworks, Libraries, and Components"></category><category term="Java"></category><category term="Spring"></category><category term="Critical Severity"></category><category term="CVE-2010-1622"></category><category term="CVE-2022-22965"></category></entry><entry><title>Unauthenticated user impersonation (auth bypass) in SAP</title><link href="https://bugalert.org/content/notices/2022-02-08-sap.html" rel="alternate"></link><published>2022-02-08T10:02:00+00:00</published><updated>2022-02-08T10:02:00+00:00</updated><author><name>Bug Alert Contributors</name></author><id>tag:bugalert.org,2022-02-08:/content/notices/2022-02-08-sap.html</id><summary type="html">&lt;p&gt;A request smuggling issue in SAP NetWeaver, SAP Content Server, and SAP Web Dispatcher allows unauthenticated user impersonation. These systems are commonly Internet-facing. The flaw has been assigned a bug alert severity of 'critical', and the vendor has supplied patches.&lt;/p&gt;</summary><content type="html">&lt;p&gt;On Tuesday, February 8, 2022, &lt;a href="https://blogs.sap.com/2022/02/08/sap-partners-with-onapsis-to-identify-and-patch-cybersecurity-vulnerabilities/"&gt;SAP published a notice detailing a major request smuggling flaw&lt;/a&gt; within their SAP NetWeaver, SAP Content Server, and SAP Web Dispatcher products, which SAP claims could lead to authentication bypass.&lt;/p&gt;
&lt;p&gt;Publicly available documentation is scarce, but the Bug Alert team has analyzed &lt;a href="https://github.com/Onapsis/onapsis_icmad_scanner/blob/master/src/ICMAD_scanner.py"&gt;the PoC&lt;/a&gt; and SAP documentation. It appears that SAP &lt;a href="https://help.sap.com/viewer/e815bb97839a4d83be6c4fca48ee5777/7.5.21/en-US/4a47abb3e1f41cd4e10000000a421937.html"&gt;can utilize the &lt;code&gt;REMOTE_USER&lt;/code&gt; header&lt;/a&gt; (which is usually stripped from untrusted traffic) to authenticate a user through an authenticating proxy or SSO module.&lt;/p&gt;
&lt;p&gt;Again, publicly available information is limited at this time, but it appears likely that this request smuggling issue could be utilized to insert the &lt;code&gt;REMOTE_USER&lt;/code&gt; request header and impersonate another SAP user, including the present-by-default 'Administrator' account.&lt;/p&gt;
&lt;p&gt;This vulnerability been assigned CVE-2022-22536. Patches are available now from the vendor.&lt;/p&gt;
&lt;p&gt;If you have feedback (did you agree/disagree that a notice should have been sent?) or questions, please comment on the discussion thread linked below. This notice cost the project approximately $150 USD to send. If you would like to support the project, &lt;a href="https://bugalert.org/content/pages/financial-support.html"&gt;you can learn more here&lt;/a&gt;.&lt;/p&gt;</content><category term="Services &amp; System Applications"></category><category term="SAP"></category><category term="CVE-2022-22536"></category><category term="Critical Severity"></category></entry><entry><title>RCE in Log4j</title><link href="https://bugalert.org/content/notices/2021-12-09-log4j.html" rel="alternate"></link><published>2021-12-09T23:00:00+00:00</published><updated>2021-12-09T23:00:00+00:00</updated><author><name>Bug Alert Contributors</name></author><id>tag:bugalert.org,2021-12-09:/content/notices/2021-12-09-log4j.html</id><summary type="html">&lt;p&gt;A remote code execution vulnerability has been found in the popular Java logging library Log4j. This issue is easily exploited in common configurations, and has been assigned a bug alert severity of 'critical'.&lt;/p&gt;</summary><content type="html">&lt;p&gt;On Tuesday, December 9th, 2021, a security researcher posted a screenshot and proof-of-concept code for executing an RCE against the latest available build of the popular Java logging library, Log4j. For up-to-date information, please visit &lt;a href="https://www.lunasec.io/docs/blog/log4j-zero-day/"&gt;https://www.lunasec.io/docs/blog/log4j-zero-day/&lt;/a&gt;.&lt;/p&gt;</content><category term="Software Frameworks, Libraries, and Components"></category><category term="Java"></category><category term="Log4j"></category><category term="Critical Severity"></category></entry></feed>